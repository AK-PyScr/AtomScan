const uint8_t frame1[] PROGMEM = {
  0x00, 0x00, 0x00, 0x80, 0xc0, 0x60, 0x30, 0x18, 0x8c, 0xcc, 0x66, 0x66, 0xe2, 0x83, 0x03, 0x03, 
	0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0xe2, 0x66, 0x66, 0xcc, 0x8c, 0x18, 0x30, 0x60, 0xc0, 0x80, 
	0x00, 0x00, 0x00, 0xe0, 0xfc, 0x0f, 0x03, 0xf0, 0x7c, 0x0e, 0x03, 0x01, 0x00, 0x00, 0x00, 0x01, 
	0xc7, 0x7c, 0xb0, 0x80, 0x80, 0x80, 0xb0, 0x7c, 0xcf, 0x03, 0x00, 0x00, 0x00, 0x01, 0x03, 0x0e, 
	0x7c, 0xf0, 0x03, 0x0f, 0xfc, 0xe0, 0x3f, 0xff, 0x80, 0x03, 0x07, 0x06, 0x06, 0x06, 0x06, 0x02, 
	0x02, 0x02, 0x03, 0xc3, 0xe0, 0x6f, 0x6d, 0x68, 0x6d, 0x6f, 0xe0, 0xc3, 0x83, 0x02, 0x02, 0x02, 
	0x06, 0x06, 0x06, 0x06, 0x07, 0x03, 0x80, 0xff, 0x3f, 0x00, 0x01, 0x07, 0x0e, 0x18, 0x30, 0x60, 
	0xc0, 0x80, 0x98, 0x3c, 0x3e, 0x63, 0x61, 0x40, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0x40, 0x61, 0x63, 
	0x3e, 0x3c, 0x98, 0x80, 0xc0, 0x60, 0x30, 0x18, 0x0e, 0x07, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x03, 0x03, 0x02, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 
	0x06, 0x06, 0x02, 0x03, 0x03, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

const uint8_t frame2[] PROGMEM = {
	// 'free-icon-radiation-1087050(2)', 35x35px
	0x00, 0x00, 0x00, 0x80, 0xc0, 0x60, 0x30, 0x18, 0x0c, 0x0c, 0x06, 0x06, 0x02, 0x03, 0x03, 0x03, 
	0xf3, 0xfb, 0x1b, 0x13, 0x33, 0x33, 0x32, 0x66, 0x66, 0xcc, 0x8c, 0x18, 0x30, 0x60, 0xc0, 0x80, 
	0x00, 0x00, 0x00, 0xe0, 0xfc, 0x0f, 0x83, 0xf0, 0x3c, 0x0e, 0x0e, 0x0c, 0x18, 0x30, 0x60, 0xe0, 
	0xc0, 0x00, 0x80, 0x81, 0xbf, 0xb0, 0xa0, 0x60, 0xc0, 0xc0, 0x40, 0x60, 0x20, 0x31, 0x33, 0x1e, 
	0x1c, 0x00, 0x03, 0x0f, 0xfc, 0xe0, 0x3f, 0xff, 0x80, 0x0f, 0x7f, 0xe0, 0x80, 0x80, 0x80, 0xc0, 
	0x60, 0x70, 0x3f, 0x1f, 0x00, 0x0f, 0x0d, 0xe8, 0x6d, 0x2f, 0x30, 0x18, 0x18, 0x30, 0x30, 0x60, 
	0x60, 0x40, 0xc0, 0xc0, 0x00, 0x00, 0x80, 0xff, 0x3f, 0x00, 0x01, 0x07, 0x0e, 0x18, 0x31, 0x63, 
	0xc3, 0x81, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0xff, 0xc0, 0x40, 0x60, 0x60, 0x60, 
	0x30, 0x30, 0x98, 0x8c, 0xc6, 0x63, 0x31, 0x18, 0x0e, 0x07, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x03, 0x03, 0x02, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 
	0x06, 0x06, 0x02, 0x03, 0x03, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

const uint8_t frame3[] PROGMEM = {
	// 'free-icon-radiation-1087050(2)', 35x35px
	0x00, 0x00, 0x00, 0x80, 0xc0, 0x60, 0x30, 0x18, 0x0c, 0xcc, 0xe6, 0xe6, 0x32, 0x33, 0x13, 0x1b, 
	0x1b, 0x1b, 0x1b, 0x1b, 0x13, 0x33, 0x32, 0xe6, 0xe6, 0xcc, 0x0c, 0x18, 0x30, 0x60, 0xc0, 0x80, 
	0x00, 0x00, 0x00, 0xe0, 0xfc, 0x0f, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x03, 0x0e, 
	0x1c, 0x38, 0xb0, 0xb0, 0xb0, 0xb0, 0xb0, 0x38, 0x1c, 0x06, 0x03, 0x01, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x03, 0x0f, 0xfc, 0xe0, 0x3f, 0xff, 0x80, 0x06, 0x7f, 0xf3, 0x83, 0x03, 0x03, 0x02, 
	0x02, 0x02, 0x06, 0x9e, 0xf0, 0x6f, 0x0d, 0x08, 0x0d, 0x6f, 0xf0, 0x1e, 0x06, 0x02, 0x02, 0x02, 
	0x03, 0x03, 0x83, 0xf3, 0x7f, 0x06, 0x80, 0xff, 0x3f, 0x00, 0x01, 0x07, 0x0e, 0x18, 0x31, 0x63, 
	0xc6, 0x8c, 0x98, 0x30, 0x30, 0x3e, 0x07, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x0f, 0x3c, 
	0x30, 0x30, 0x98, 0x8c, 0xc6, 0x63, 0x31, 0x18, 0x0e, 0x07, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x03, 0x03, 0x02, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 
	0x06, 0x06, 0x02, 0x03, 0x03, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

const uint8_t frame4[] PROGMEM = {
	// 'free-icon-radiation-1087050(2)', 35x35px
	0x00, 0x00, 0x00, 0x80, 0xc0, 0x60, 0x30, 0x18, 0x8c, 0xcc, 0x66, 0x66, 0x32, 0x33, 0x33, 0x13, 
	0x1b, 0xfb, 0xf3, 0x03, 0x03, 0x03, 0x02, 0x06, 0x06, 0x0c, 0x0c, 0x18, 0x30, 0x60, 0xc0, 0x80, 
	0x00, 0x00, 0x00, 0xe0, 0xfc, 0x0f, 0x03, 0x00, 0x1c, 0x1e, 0x13, 0x31, 0x30, 0x60, 0x60, 0xc0, 
	0xc0, 0x60, 0xa0, 0xb0, 0xbf, 0x81, 0x80, 0x00, 0xc0, 0xe0, 0x70, 0x30, 0x18, 0x0c, 0x0e, 0x0e, 
	0x3c, 0xf0, 0x83, 0x0f, 0xfc, 0xe0, 0x3f, 0xff, 0x80, 0x00, 0x00, 0xc0, 0xc0, 0x60, 0x60, 0x20, 
	0x30, 0x10, 0x18, 0x18, 0x30, 0x2f, 0x6d, 0xe8, 0x0d, 0x0f, 0x00, 0x1f, 0x3f, 0x30, 0x60, 0xc0, 
	0x80, 0x80, 0x80, 0xe0, 0x7f, 0x0f, 0x80, 0xff, 0x3f, 0x00, 0x01, 0x07, 0x0e, 0x18, 0x31, 0x63, 
	0xc6, 0x8c, 0x98, 0x30, 0x30, 0x60, 0x60, 0x60, 0x40, 0xc0, 0xff, 0x7c, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x80, 0x81, 0xc3, 0x63, 0x31, 0x18, 0x0e, 0x07, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x03, 0x03, 0x02, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 
	0x06, 0x06, 0x02, 0x03, 0x03, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

const uint8_t* frames[] = {frame1, frame2, frame3, frame4};  // Массив кадров

const int frameCount = 4;
unsigned long prevMillis = 0;
const int frameDelay = 200;  // Задержка между кадрами в миллисекундах
int currentFrame = 0;


unsigned long ledTimer = 0;
bool ledState = false;

void LED_blink(){                                           // при срабатывании датчика подаем высокий сигнал на 20мс 
  if (event && !ledState) {
      event = LOW;
      digitalWrite(LED_BUILTIN, HIGH);         
      ledState = true;                              
      ledTimer = millis();                         
      // Serial.println("bym");
    }  

    if (ledState && millis() - ledTimer >= 10) {
      digitalWrite(LED_BUILTIN, LOW);
      ledState = false;
    }
}

void print_to_display(){
    oled.setScale(1);
    oled.setCursor(35, 0);  
    oled.print("AtomScan");

    oled.setCursor(0, 1);  
    oled.println();
    oled.print("CPS: ");
    oled.println(CPS);

    oled.print("CPM: ");
    oled.println(CPM, 2);
    oled.println();
    oled.println();

    oled.print("DOZA: ");
    oled.println(doza, 2); 

    // oled.rect(4, 55, 124, 60, OLED_STROKE);  // прямоугольник скруглённый (лев. верхн, прав. нижн)
    // for(int l=4; l < 124; l++){
    //   for(int i = 55; i < 60; i++){
        
    //     oled.dot(l, i, OLED_FILL);    
    //   }
    //   delay(30);
    //   oled.update();
    // } 
    
    oled.update();
}

void updateAnimation() {
  unsigned long currentMillis = millis();
  if (currentMillis - prevMillis >= frameDelay) {
    prevMillis = currentMillis;  // Обновляем время последнего кадра

    oled.clear();
    oled.drawBitmap(90, 0, frames[currentFrame], 35, 35);
    // oled.update();

    currentFrame = (currentFrame + 1) % frameCount;  // Зацикливание кадров
  }
}

void loop() {  
  CalculateCPM();
  LED_blink();
  print_to_display();
  updateAnimation();
}
